<?xml version="1.0" encoding="UTF-8"?>

<manual>
	<entry>
		<title>atoi</title>
		<topic>
ATOI(3) 		 BSD Library Functions Manual		       ATOI(3)

NAME
     atoi, atoi_l -- convert ASCII string to integer

LIBRARY
     Standard C Library (libc, -lc)
		</topic>
		<summary>
ATOI(3) 		 BSD Library Functions Manual		       ATOI(3)

NAME
     atoi, atoi_l -- convert ASCII string to integer

LIBRARY
     Standard C Library (libc, -lc)

SYNOPSIS
     #include &lt;stdlib.h&gt;

     int
     atoi(const char *str);

     #include &lt;xlocale.h&gt;

     int
     atoi_l(const char *str, locale_t loc);

DESCRIPTION
     The atoi() function converts the initial portion of the string pointed to
     by str to int representation.

     It is equivalent to:

	   (int)strtol(str, (char **)NULL, 10);

     While the atoi() function uses the current locale, the atoi_l() function
     may be passed a locale directly. See xlocale(3) for more information.
			
		</summary>
		<detail>	
ATOI(3) 		 BSD Library Functions Manual		       ATOI(3)

NAME
     atoi, atoi_l -- convert ASCII string to integer

LIBRARY
     Standard C Library (libc, -lc)

SYNOPSIS
     #include &lt;stdlib.h&gt;

     int
     atoi(const char *str);

     #include &lt;xlocale.h&gt;

     int
     atoi_l(const char *str, locale_t loc);

DESCRIPTION
     The atoi() function converts the initial portion of the string pointed to
     by str to int representation.

     It is equivalent to:

	   (int)strtol(str, (char **)NULL, 10);

     While the atoi() function uses the current locale, the atoi_l() function
     may be passed a locale directly. See xlocale(3) for more information.

IMPLEMENTATION NOTES
     The atoi() and atoi_l() functions are thread-safe and async-cancel-safe.

     The atoi() and atoi_l() functions have been deprecated by strtol() and
     strtol_l() and should not be used in new code.

ERRORS
     The function atoi() need not affect the value of errno on an error.

SEE ALSO
     atof(3), atol(3), strtod(3), strtol(3), strtoul(3), xlocale(3)

STANDARDS
     The atoi() function conforms to ISO/IEC 9945-1:1990 (``POSIX.1''),
     ISO/IEC 9899:1990 (``ISO C90''), and ISO/IEC 9899:1999 (``ISO C99'').

BSD				 June 4, 1993				   BSD
		</detail>
	</entry>
	<entry>
		<title>fork</title>
		<topic>
FORK(2) 		    BSD System Calls Manual		       FORK(2)

NAME
     fork -- create a new process

SYNOPSIS
     #include &lt;unistd.h&gt;

     pid_t
     fork(void);
		</topic>
		<summary>
FORK(2) 		    BSD System Calls Manual		       FORK(2)

NAME
     fork -- create a new process

SYNOPSIS
     #include &lt;unistd.h&gt;

     pid_t
     fork(void);

DESCRIPTION
     Fork() causes creation of a new process.  The new process (child process)
     is an exact copy of the calling process (parent process) except for the
     following:

	   o   The child process has a unique process ID.

	   o   The child process has a different parent process ID (i.e., the
	       process ID of the parent process).

	   o   The child process has its own copy of the parent's descriptors.
	       These descriptors reference the same underlying objects, so
	       that, for instance, file pointers in file objects are shared
	       between the child and the parent, so that an lseek(2) on a
	       descriptor in the child process can affect a subsequent read or
	       write by the parent.  This descriptor copying is also used by
	       the shell to establish standard input and output for newly cre-
	       ated processes as well as to set up pipes.

	   o   The child processes resource utilizations are set to 0; see
	       setrlimit(2).

RETURN VALUES
     Upon successful completion, fork() returns a value of 0 to the child
     process and returns the process ID of the child process to the parent
     process.  Otherwise, a value of -1 is returned to the parent process, no
     child process is created, and the global variable errno is set to indi-
     cate the error.
		</summary>
		<detail>
FORK(2) 		    BSD System Calls Manual		       FORK(2)

NAME
     fork -- create a new process

SYNOPSIS
     #include &lt;unistd.h&gt;

     pid_t
     fork(void);

DESCRIPTION
     Fork() causes creation of a new process.  The new process (child process)
     is an exact copy of the calling process (parent process) except for the
     following:

	   o   The child process has a unique process ID.

	   o   The child process has a different parent process ID (i.e., the
	       process ID of the parent process).

	   o   The child process has its own copy of the parent's descriptors.
	       These descriptors reference the same underlying objects, so
	       that, for instance, file pointers in file objects are shared
	       between the child and the parent, so that an lseek(2) on a
	       descriptor in the child process can affect a subsequent read or
	       write by the parent.  This descriptor copying is also used by
	       the shell to establish standard input and output for newly cre-
	       ated processes as well as to set up pipes.

	   o   The child processes resource utilizations are set to 0; see
	       setrlimit(2).

RETURN VALUES
     Upon successful completion, fork() returns a value of 0 to the child
     process and returns the process ID of the child process to the parent
     process.  Otherwise, a value of -1 is returned to the parent process, no
     child process is created, and the global variable errno is set to indi-
     cate the error.

ERRORS
     Fork() will fail and no child process will be created if:

     [EAGAIN]		The system-imposed limit on the total number of pro-
			cesses under execution would be exceeded.  This limit
			is configuration-dependent.

     [EAGAIN]		The system-imposed limit MAXUPRC (&lt;sys/param.h&gt;) on
			the total number of processes under execution by a
			single user would be exceeded.

     [ENOMEM]		There is insufficient swap space for the new process.

LEGACY SYNOPSIS
     #include &lt;sys/types.h&gt;
     #include &lt;unistd.h&gt;

     The include file &lt;sys/types.h&gt; is necessary.

SEE ALSO
     execve(2), sigaction(2), wait(2), compat(5)

HISTORY
     A fork() function call appeared in Version 6 AT&amp;T UNIX.

CAVEATS
     There are limits to what you can do in the child process.	To be totally
     safe you should restrict yourself to only executing async-signal safe
     operations until such time as one of the exec functions is called.  All
     APIs, including global data symbols, in any framework or library should
     be assumed to be unsafe after a fork() unless explicitly documented to be
     safe or async-signal safe.  If you need to use these frameworks in the
     child process, you must exec.  In this situation it is reasonable to exec
     yourself.

4th Berkeley Distribution	 June 4, 1993	     4th Berkeley Distribution
		</detail>
	</entry>
	<entry>
		<title>printf</title>
		<topic>
PRINTF(1)		  BSD General Commands Manual		     PRINTF(1)

NAME
     printf -- formatted output

SYNOPSIS
     printf format [arguments ...]
		</topic>
		<summary>
PRINTF(1)		  BSD General Commands Manual		     PRINTF(1)

NAME
     printf -- formatted output

SYNOPSIS
     printf format [arguments ...]

DESCRIPTION
     The printf utility formats and prints its arguments, after the first,
     under control of the format.  The format is a character string which con-
     tains three types of objects: plain characters, which are simply copied
     to standard output, character escape sequences which are converted and
     copied to the standard output, and format specifications, each of which
     causes printing of the next successive argument.

     The arguments after the first are treated as strings if the corresponding
     format is either c, b or s; otherwise it is evaluated as a C constant,
     with the following extensions:

	   o   A leading plus or minus sign is allowed.
	   o   If the leading character is a single or double quote, the value
	       is the ASCII code of the next character.

     The format string is reused as often as necessary to satisfy the
     arguments.  Any extra format specifications are evaluated with zero or
     the null string.
		</summary>
		<detail>
PRINTF(1)		  BSD General Commands Manual		     PRINTF(1)

NAME
     printf -- formatted output

SYNOPSIS
     printf format [arguments ...]

DESCRIPTION
     The printf utility formats and prints its arguments, after the first,
     under control of the format.  The format is a character string which con-
     tains three types of objects: plain characters, which are simply copied
     to standard output, character escape sequences which are converted and
     copied to the standard output, and format specifications, each of which
     causes printing of the next successive argument.

     The arguments after the first are treated as strings if the corresponding
     format is either c, b or s; otherwise it is evaluated as a C constant,
     with the following extensions:

	   o   A leading plus or minus sign is allowed.
	   o   If the leading character is a single or double quote, the value
	       is the ASCII code of the next character.

     The format string is reused as often as necessary to satisfy the
     arguments.  Any extra format specifications are evaluated with zero or
     the null string.

     Character escape sequences are in backslash notation as defined in the
     ANSI X3.159-1989 (``ANSI C89''), with extensions.	The characters and
     their meanings are as follows:

	   \a	   Write a &lt;bell&gt; character.
	   \b	   Write a &lt;backspace&gt; character.
	   \c	   Ignore remaining characters in this string.
	   \f	   Write a &lt;form-feed&gt; character.
	   \n	   Write a &lt;new-line&gt; character.
	   \r	   Write a &lt;carriage return&gt; character.
	   \t	   Write a &lt;tab&gt; character.
	   \v	   Write a &lt;vertical tab&gt; character.
	   \'	   Write a &lt;single quote&gt; character.
	   \\	   Write a backslash character.
	   \num
	   \0num   Write an 8-bit character whose ASCII value is the 1-, 2-,
		   or 3-digit octal number num.

     Each format specification is introduced by the percent character (``%'').
     The remainder of the format specification includes, in the following
     order:

     Zero or more of the following flags:

	     #	     A `#' character specifying that the value should be
		     printed in an ``alternate form''.	For c, d, and s, for-
		     mats, this option has no effect.  For the o formats the
		     precision of the number is increased to force the first
		     character of the output string to a zero.	For the x (X)
		     format, a non-zero result has the string 0x (0X)
		     prepended to it.  For e, E, f, g, and G, formats, the
		     result will always contain a decimal point, even if no
		     digits follow the point (normally, a decimal point only
		     appears in the results of those formats if a digit fol-
		     lows the decimal point).  For g and G formats, trailing
		     zeros are not removed from the result as they would oth-
		     erwise be;

	     -	     A minus sign `-' which specifies left adjustment of the
		     output in the indicated field;

	     +	     A `+' character specifying that there should always be a
		     sign placed before the number when using signed formats.

	     ` '     A space specifying that a blank should be left before a
		     positive number for a signed format.  A `+' overrides a
		     space if both are used;

	     0	     A zero `0' character indicating that zero-padding should
		     be used rather than blank-padding.  A `-' overrides a `0'
		     if both are used;

     Field Width:
	     An optional digit string specifying a field width; if the output
	     string has fewer characters than the field width it will be
	     blank-padded on the left (or right, if the left-adjustment indi-
	     cator has been given) to make up the field width (note that a
	     leading zero is a flag, but an embedded zero is part of a field
	     width);

     Precision:
	     An optional period, `.', followed by an optional digit string
	     giving a precision which specifies the number of digits to appear
	     after the decimal point, for e and f formats, or the maximum num-
	     ber of characters to be printed from a string; if the digit
	     string is missing, the precision is treated as zero;

     Format:
	     A character which indicates the type of format to use (one of
	     diouxXfFeEgGaAcsb).  The uppercase formats differ from their low-
	     ercase counterparts only in that the output of the former is
	     entirely in uppercase.  The floating-point format specifiers
	     (fFeEgGaA) may be prefixed by an L to request that additional
	     precision be used, if available.

     A field width or precision may be `*' instead of a digit string.  In this
     case an argument supplies the field width or precision.

     The format characters and their meanings are:

     diouXx	 The argument is printed as a signed decimal (d or i),
		 unsigned octal, unsigned decimal, or unsigned hexadecimal (X
		 or x), respectively.

     fF 	 The argument is printed in the style `[-]ddd.ddd' where the
		 number of d's after the decimal point is equal to the preci-
		 sion specification for the argument.  If the precision is
		 missing, 6 digits are given; if the precision is explicitly
		 0, no digits and no decimal point are printed.  The values
		 infinity and NaN are printed as `inf' and `nan', respec-
		 tively.

     eE 	 The argument is printed in the style e `[-d.ddd+-dd]' where
		 there is one digit before the decimal point and the number
		 after is equal to the precision specification for the argu-
		 ment; when the precision is missing, 6 digits are produced.
		 The values infinity and NaN are printed as `inf' and `nan',
		 respectively.

     gG 	 The argument is printed in style f (F) or in style e (E)
		 whichever gives full precision in minimum space.

     aA 	 The argument is printed in style `[-h.hhh+-pd]' where there
		 is one digit before the hexadecimal point and the number
		 after is equal to the precision specification for the argu-
		 ment; when the precision is missing, enough digits are pro-
		 duced to convey the argument's exact double-precision float-
		 ing-point representation.  The values infinity and NaN are
		 printed as `inf' and `nan', respectively.

     c		 The first character of argument is printed.

     s		 Characters from the string argument are printed until the end
		 is reached or until the number of characters indicated by the
		 precision specification is reached; however if the precision
		 is 0 or missing, all characters in the string are printed.

     b		 As for s, but interpret character escapes in backslash nota-
		 tion in the string argument.

     %		 Print a `%'; no argument is used.

     The decimal point character is defined in the program's locale (category
     LC_NUMERIC).

     In no case does a non-existent or small field width cause truncation of a
     field; padding takes place only if the specified field width exceeds the
     actual width.

EXIT STATUS
     The printf utility exits 0 on success, and &gt;0 if an error occurs.

COMPATIBILITY
     The traditional BSD behavior of converting arguments of numeric formats
     not beginning with a digit to the ASCII code of the first character is
     not supported.

SEE ALSO
     echo(1), printf(3)

STANDARDS
     The printf command is expected to be mostly compatible with the IEEE Std
     1003.2 (``POSIX.2'') specification.

HISTORY
     The printf command appeared in 4.3BSD-Reno.  It is modeled after the
     standard library function, printf(3).

BUGS
     Since the floating point numbers are translated from ASCII to floating-
     point and then back again, floating-point precision may be lost.  (By
     default, the number is translated to an IEEE-754 double-precision value
     before being printed.  The L modifier may produce additional precision,
     depending on the hardware platform.)

     ANSI hexadecimal character constants were deliberately not provided.

     The escape sequence \000 is the string terminator.  When present in the
     argument for the b format, the argument will be truncated at the \000
     character.

     Multibyte characters are not recognized in format strings (this is only a
     problem if `%' can appear inside a multibyte character).

     Parsing of - arguments is also somewhat different from printf(3), where
     unknown arguments are simply printed instead of being flagged as errors.

BSD				April 14, 2005				   BSD
		</detail>
	</entry>
	<entry>
		<title>strlen</title>
		<topic>
STRLEN(3)		 BSD Library Functions Manual		     STRLEN(3)

NAME
     strlen, strnlen -- find length of string

LIBRARY
     Standard C Library (libc, -lc)

SYNOPSIS
     #include &lt;string.h&gt;

     size_t
     strlen(const char *s);

     size_t
     strnlen(const char *s, size_t maxlen);
		</topic>
		<summary>
STRLEN(3)		 BSD Library Functions Manual		     STRLEN(3)

NAME
     strlen, strnlen -- find length of string

LIBRARY
     Standard C Library (libc, -lc)

SYNOPSIS
     #include &lt;string.h&gt;

     size_t
     strlen(const char *s);

     size_t
     strnlen(const char *s, size_t maxlen);

DESCRIPTION
     The strlen() function computes the length of the string s.  The strnlen()
     function attempts to compute the length of s, but never scans beyond the
     first maxlen bytes of s.

RETURN VALUES
     The strlen() function returns the number of characters that precede the
     terminating NUL character.  The strnlen() function returns either the
     same result as strlen() or maxlen, whichever is smaller.
		</summary>
		<detail>
STRLEN(3)		 BSD Library Functions Manual		     STRLEN(3)

NAME
     strlen, strnlen -- find length of string

LIBRARY
     Standard C Library (libc, -lc)

SYNOPSIS
     #include &lt;string.h&gt;

     size_t
     strlen(const char *s);

     size_t
     strnlen(const char *s, size_t maxlen);

DESCRIPTION
     The strlen() function computes the length of the string s.  The strnlen()
     function attempts to compute the length of s, but never scans beyond the
     first maxlen bytes of s.

RETURN VALUES
     The strlen() function returns the number of characters that precede the
     terminating NUL character.  The strnlen() function returns either the
     same result as strlen() or maxlen, whichever is smaller.

SEE ALSO
     string(3), wcslen(3), wcswidth(3)

STANDARDS
     The strlen() function conforms to ISO/IEC 9899:1990 (``ISO C90'').  The
     strnlen() function conforms to IEEE Std 1003.1-2008 (``POSIX.1'').

BSD			       February 28, 2009			   BSD
		</detail>
	</entry>
	<entry>
		<title>pthread_create</title>
		<topic>
PTHREAD_CREATE(3)	 BSD Library Functions Manual	     PTHREAD_CREATE(3)

NAME
     pthread_create -- create a new thread

SYNOPSIS
     #include &lt;pthread.h&gt;

     int
     pthread_create(pthread_t *restrict thread,
	 const pthread_attr_t *restrict attr, void *(*start_routine)(void *),
	 void *restrict arg);
		</topic>
		<summary>
PTHREAD_CREATE(3)	 BSD Library Functions Manual	     PTHREAD_CREATE(3)

NAME
     pthread_create -- create a new thread

SYNOPSIS
     #include &lt;pthread.h&gt;

     int
     pthread_create(pthread_t *restrict thread,
	 const pthread_attr_t *restrict attr, void *(*start_routine)(void *),
	 void *restrict arg);

DESCRIPTION
     The pthread_create() function is used to create a new thread, with
     attributes specified by attr, within a process.  If attr is NULL, the
     default attributes are used.  If the attributes specified by attr are
     modified later, the thread's attributes are not affected.	Upon success-
     ful completion, pthread_create() will store the ID of the created thread
     in the location specified by thread.

     Upon its creation, the thread executes start_routine, with arg as its
     sole argument.  If start_routine returns, the effect is as if there was
     an implicit call to pthread_exit(), using the return value of
     start_routine as the exit status.	Note that the thread in which main()
     was originally invoked differs from this.	When it returns from main(),
     the effect is as if there was an implicit call to exit(), using the
     return value of main() as the exit status.

     The signal state of the new thread is initialized as:

	   o   The signal mask is inherited from the creating thread.

	   o   The set of signals pending for the new thread is empty.
		</summary>
		<detail>
PTHREAD_CREATE(3)	 BSD Library Functions Manual	     PTHREAD_CREATE(3)

NAME
     pthread_create -- create a new thread

SYNOPSIS
     #include &lt;pthread.h&gt;

     int
     pthread_create(pthread_t *restrict thread,
	 const pthread_attr_t *restrict attr, void *(*start_routine)(void *),
	 void *restrict arg);

DESCRIPTION
     The pthread_create() function is used to create a new thread, with
     attributes specified by attr, within a process.  If attr is NULL, the
     default attributes are used.  If the attributes specified by attr are
     modified later, the thread's attributes are not affected.	Upon success-
     ful completion, pthread_create() will store the ID of the created thread
     in the location specified by thread.

     Upon its creation, the thread executes start_routine, with arg as its
     sole argument.  If start_routine returns, the effect is as if there was
     an implicit call to pthread_exit(), using the return value of
     start_routine as the exit status.	Note that the thread in which main()
     was originally invoked differs from this.	When it returns from main(),
     the effect is as if there was an implicit call to exit(), using the
     return value of main() as the exit status.

     The signal state of the new thread is initialized as:

	   o   The signal mask is inherited from the creating thread.

	   o   The set of signals pending for the new thread is empty.

RETURN VALUES
     If successful,  the pthread_create() function will return zero.  Other-
     wise, an error number will be returned to indicate the error.

ERRORS
     pthread_create() will fail if:

     [EAGAIN]		The system lacked the necessary resources to create
			another thread, or the system-imposed limit on the
			total number of threads in a process
			[PTHREAD_THREADS_MAX] would be exceeded.

     [EINVAL]		The value specified by attr is invalid.

SEE ALSO
     fork(2), pthread_cleanup_pop(3), pthread_cleanup_push(3),
     pthread_exit(3), pthread_join(3)

STANDARDS
     pthread_create() conforms to ISO/IEC 9945-1:1996 (``POSIX.1'').

BSD				 April 4, 1996				   BSD
		</detail>
	</entry>
</manual>
